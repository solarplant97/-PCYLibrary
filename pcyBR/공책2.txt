HTML = 구조(웹페이지 문서 담당) 
CSS = 표현(웹페이지 디자인 담당)
JavaScript = 동작(웹페이지 이벤트 담당)

html5 특징
웹 표준이란 브라우저 관계없이 실행되도록 만드는 호환성(Cross Browsing)을 초점으로 둔 표준안
웹 표준 장점 - 웹 접근성의 편리 
	       사이드 디자인 관리로 시간 단축(html 과 css의 분리로 변경이 요구될 때 css만 수정해 빠르게 수정)
	       파일 사이즈 감소로 메모리 절약과 로딩 시작을 축소(불필요한 코드를 줄임)

<시작태그 속성 = 속성값> 내용 </종료태그>
ex<p id = "myFont"> hello world </p>

<!DOCTYPE html> // html5사용
<html>              // html 틀
<head>              // 주소창 틀
<meta charset="UTF-8"> // 인코딩 utf8사용
<title></title>       // 주소창 위에 이름
</head>            
<body>             // 본문 틀
</body>
</html> 

<!내용>  -> 주석
<h1~6 > -> 제목 태그(글자 크기를 변경하고 자동 줄바꿈 크기1~6)  
<br /> -> 줄 바꾸기
<pre> -> 입력한 모양대로 출력하는 태그
<strong> -> 텍스트 진하게
<em>  -> 텍스트 기울임
<ins> -> 밑줄 표시
<del> -> 글자 중간에 선
<small> -> 글자를 작게
<mark> -> 형광펜
<sub> -> 아래 첨자
<sup> -> 위에 첨자

<hr /> -> 텍스트 사이에 선을 긋고 줄 바꿈
<p> -> 문단을 분리하고 줄바꾸기 2번 실행
<div> -> 문단을 분리하고 줄바꾸기
<span> -> 문단은 분리하고 줄안바꿈
<img src = "이미지폴더/이미지이름.속성" /> -> 이미지 삽입
<img src = "이미지폴더/이미지이름.속성" alt = "없다"/> -> 이미지 삽입시도후 깨지거나 없으면 alt 명령문 실행
<figure> -> 그림,사진,텍스트,다이어그램 콘텐츠를 묶어서 그룹으로 만듬
<figcaption> -> figure 요소를 위한 제목을 표현

<ul>
<li>내용</li> -> 리스트 항목
<li>내용</li>
</ul> -> 비순차적 목록

<ol type ="a"> -> a부터 순서대로 나옴, 디폴트 값은 1
<li>내용</li>
<li>내용</li>
</ol> -> 순차적 목록

<dl>
<dd>내용</dt> -> 정의할 용어
<dd>내용</dd> -> 용어 설명
</dl> -> 정의 목록

<a href ="http://www.w3c.org">w3c</a>
<a href ="exam01_htag.html target="_blank">처음생성한 페이지로 이동</a>
<a href = "exam"08_imgtag.html title = "exam08_imgtag.html페이지로 이동"><img src ="image/mouse.png"/>
링크 태그<a> 속성
href = 경로
_blank 새창 또는 새탭에서 링크 열림
_self 현재 창에서 링크 열림
_parent 바로 이전 창에서 링크 열림
_top 최상위 프레임에서 링크 열림
framename 해당 프레임 이름을 가진 프레임에서 링크 열림 

<table 태그> -> 표로 데이터를 표현
<tr> 표 행 구분
<th> 표 내부의 제목
<td> 열을 구분
<caption> 표의 상단/ 하단에 제목을 적을 때 사용
<thead> 테이블 구조 설정 시 제목 부분

table 디자인 변경
border 테이블의 테두리
bordercolor 테이블의 테두리 색상 
width 테이블 가로 크기 
height  테이블 세로 크기 
align 정렬
bgcolor 배경색 
colspan 가로 합병(열 합병)
rowspan 세로 합병(행 합병)

<iframe 태그> -> html 문서내에 일정한 크기의 영역을 할당해 삽입
<iframe src = "table.html">
	<p>이 브라우저는 iframe 지원 안함</p>
	</iframe>

<form태그> -> 정보를 입력 또는 선택하고 서버에 전달하는 
		CGI((웹 서버와 클라이언트 데이터를 주고받기 위한 표준 인터페이스)기능
<form action =" enctype" method = "">
		<input type ="" value = "" size= "" maxlength =""/>
		<select name = "" size = "" multiple>
			<option value =""></option>
			</select>
			<textarea name =""rows=""cols="" ></textarea>
		</form>

<form 태그 속성>
action ="url" -> 내용 처리를 위해 서버쪽 url지정
method = "get/post" -> 클라이언트의 데이터를 서버로 보내기 위한 방법을 설정
			get은 데이터 전송시 길이 제한 있고 주소 표시줄에 전송값을 노출
			post는 대용량이거나 보안 필요시 사용
enctype="" -> application/x-www-form-urlencoded -> 
			기본값으로, 모든 문자들을 서버로 보내기전에 인코딩 됨을 명시
		multipart/form-data -> 
			모든 문자를 인코딩하지 않을을 명시(파일이나 이미지 전송시 사용)
		text/plain -> 공백문자는 +기호로 변환하지만 나머지 문자는 모두 인코딩 되지 않음을 명시

<form 태그 하위 태그>
input type ="" -> text -> 텍스트 입력
	       password -> 비밀번호
	       checkbox -> 체크박스(checked ="checked")
	       radio -> 라디오 버튼(보기중 하나 선택)(checked ="checked")
	       submit -> form에서 지정한 페이지로 이동
	       reset -> 모든 입력양식 초기화
	       button -> 이벤트 처리 버튼
	       image -> 이미지(scr="url")(alt -> 이미지 대신 쓸 수 있는 텍스트)
  	       hidden -> 해당 내용 표시하지 않음
	       file -> 파일 입력 양식(accept -> 파일의 확장자를 표시)
input name="서버에 전송될 양식의 이름"
	value="입력 변수의 초기값"
	siz="입력필드의 길이 설정"
	maxlength="입력 최대 길이수"
	readonly="readonly" -> 읽기 전용
	date -> 년/월/일
	month -> 년 월
	weak -> 주
	time -> 시간
	datetime-local -> 연 월 일
	email -> 이메일
	tel -> 전화번호
	number -> 스핀박스를 이용해 숫자 입력(min,max,step,value)
	range -> 슬라이드 막대로 숫자 선택(min,max,step,value)
	color -> 색상표
autofocus -> 자동으로 입력 포커스 표시
pattern -> 입력 가능한 형태의 정규 표현식
required -> 반드시 채워야 하는 필드
placeholder -> 입력할 내용을 흐린색으로 보여줌 값 입력시 사라짐

textarea cols, rows -> 여러행의 택스트 입력 양식
select optgroup option -> 선택 양식 / 옵션의 그룹화 / 옵션 추가
fieldset , legend -> 입력 양식 그룹 지정/ 입력 양식 그룹 이름

label ->  요소간의 연결 관계를 설명
for -> 연결하려는 id명 설정
 <input type="radio" name="ages" id="teen" value="teenage">
    <label for="teen">10대</label><br>

audio 태그
loop -> 반복재생
<audio contrls autoplay> -> 파일 로드시 자동 재생(controls = 직접 컨트롤)
	<source src = "재생할 파일 이름(mp3)" type ="audio/mp3"> ->(오디오 타입 결정)
	브라우저에서 &lt;audio&gt; 요소 , 혹은 mp3/ogg/wav를 지원하지 않음
</audio>

video 태그
src -> 파일 경로
controls -> 컨트롤 여부
width height -> 비디오 영역 크기
poster -> 동영상이 안나올때 대신 표시할 그림
preload auto-> 기본값, 페이지를 로드하고 비디오 파일을 바로 다운
	meradata -> 사용자 재생전까지 비디오의 크기 첫 프레임, 비디오 관련 메타데이터만 다운
	none -> 재생전까지 다운받지 않음
 

&nbsp; -> 공백
&ensp; -> 공백 2개 자리
&emsp; -> 공백 4개 자리
&lt -> <
&gt -> >
&amp -> &
&quot -> "
&copy -> c

p{color:red; padding:7px}
#id
.class

외부 스타일시트
<link rel = "stylesheet" type="text/css" href="style.css">

tag[속성]{속성: 값} -> 속성이 포함된 태그를 선택
    [속성=value]	-> 속성값이 value를 단어를 포함하는 태그를 선택
	~= 	-> value를 포함하는 태그
	|=	-> value이거나 시작하는 태그
	^=	-> value로 시작하는 태그
	*= 	-> value를 포함하는 태그
	$=	-> value로 끝나는 태그

tag:패턴{ 속성: 속성값}
    first-line = 태그의 첫번째 라인
    first-letter = 태그의 첫번째 문자
    first-child = 태그의 첫번째 자식 요소
    nth-child(n) = 태그의 odd/even/n번째 요소
    before{content: 값} = 선택한 태그 앞에 지정한 콘텐츠 삽입
    after{content: 값} = 선택한 태그 뒤에 지정한 콘텐츠 삽입
    link = 하이퍼링크 태그에 방문하지 않았을 경우
    visited = 하이퍼링크 태그에 방문했을 경우
    hover = 마우스 커서가 태그에 올라와 있는 동안
    active = 태그를 클릭하였을 때
    focus = 태그에 포커스가 머물러 있을 경우

tag1 tag2 -> 태그1의 후손인 태그2를 선택
taj1 > tag2 -> 태그1의 자식인 태그2를 선택
선택자 ~ 선택자 -> 선택자 A뒤에 위치하는 선택자 B를 모두 선택
선택자 + 선택자 -> 선택자 A바로 뒤에 위치하는 선택자 B를 선택
선택자, 선택자 -> 선택자 AB를 그룹지어 선택

font-family 글꼴
font-size 문자의 크기
font-style 글자 폰트
font-weight 글자 굵기
font-variant 영문 소문자를 작은 대문자로 표시
line-height 줄 간격을 조절
font 속성을 한번에 기술

상대 크기 단위
em -> 기준 문자의 높이
% -> 기준 글꼴 크기의 백분율 크기
ex -> 기준 문자의 소문자 높이
px ->1픽셀을 1로 하는 단위
larger -> 앞에 입력한 문자보다 크게
smaller -> 앞에 입력한 문자보다 작게

문단 스타일
text-decoration  택스트에 줄긋기
	align   문단 정렬
	indent  여러 문단일 경우 문단 첫 글자를 얼마나 들여쓸지
	transform	 택스트를 대문자 혹은 소문자로 변환
letter-spacing 글자 사이 간격
word-spacing 단어 사이 간격
vertical-align 문자간의 수직 정렬
white-space 줄바꿈 설정

태두리 스타일
border-width 선의 굵기
	style 선의 모양
	color 선의 색상
	radius 태두리 모서리 둥글게

리스트 스타일
list-style-type 목록의 글머리 기호
	image 목록의 글머리 기호에 이미지 사용
	position 글머리 기호 위치
list-style 리스트 속성 한번에 사용

배셩 스타일
background-image 배경 이미지 지정
	    repeat 배경 이미지 반복 여부와 반복 방향 지정
	    position 배경 이미지를 반복하지 않고 한번만 표시할 경우 특정한 위치에 배경 이미지를 배치
 	    attachment 배경 이미지 고정
	    size 배경이미지 크기
border-collapse 테이블 셀간 간격 여부
	spacing 테이블 셀간 공백 크기 조절
empty-cells 테두리를 분리해 표시할 경우 빈 셀의 표시 여부
table-layout 셀 너비 고정 또는 가변으로 할지

magin -> 태두리 밖 간격
padding -> 태두리 안 간격

overflow 속성
visible = 박스 범위를 초과하는 내용도 그대로 표현
scroll = 우측 스크롤바를 이용하여 위 아래 이동 하며 내용 확인
hidden = 박스를 벗어나는 내용 숨김
auto = 내용이 박스를 벗어날 때만 스크롤바 생김
ex> #visible{overflow: visible;}

블럭 요소 <div><p><h><ul><ol><form> 등
인라인 요소 <span><img><a><label> 등

요소들은 각각 diplay 속성을 가지고 있으며 inline 또는 block으로 변경 가능

display 속성
inline = 새로운 라인에서 시작하지 않고 너비도 해당 내용만큼만 영역을 생성
block = 줄바꿈한 후 새로운 라인의 전체 영역을 확보
inline-block = inline을 block처럼 만들어 바로 옆에 나열
none = 박스를 생성하지 않고 화면에 안보임

visibility 속성
visible = 기본값. 요소를 보여줌
hidden = 요소를 보여주지 않음
collapse = 테이블 요소에서만 사용 할 수 있음

position 속성
static = 요소를 순서대로 배치
relative = 직전 요소의 상대 위치를 배치
absolute 문서 내에서 절대 위치에 배치
fixed = 현재 보이는 브라우저 화면 내에 절대 위치에 배치

z-index 속성 = 어느 요소가 앞에 나올지 배치 순서를 정함 position 속성을 적용한 요소만 사용가능
auto|number= 값이 높을수록 앞쪽에 배치

float 속성 -> 본문 중간에 이미지를 넣고자 하거나 문서의 위치를 설정할때 사용
none -> 플로팅 박스 적용없이 순서대로
left -> 플로팅 박스를 왼쪽 경계에 배치하며 주변 콘텐츠는 오른쪽에 나타남
right -> 플로팅 박스를 오른쪽 경계에 배치 주변콘텐츠가 왼쪽

clear 속성 = float 속성을 취소할때 사용
left
right
both = 모든 float 취소

뷰표트의 속성
width = 뷰포트의 가로이다
height = 뷰포트의 세로 높이
initial-scale = 뷰포트의 초기 화면의 크기 값이다(1~10.0 기본값 1)
minimum-scale = 뷰포트의 최소 비율값이다(0~10.0 기본값 0.25)
maximum-scale = 뷰표트의 최대 비율값이다(0~10.0 기본값 1.6)
user-scalable = 사용자가 확대 또는 축소를 설정하는 속성

자바스크립트 사용
<script type ="text/javascript" src ="자바스크립트파일명.js"> -> html에 자바스크립트 불러오기

alert("안녕하세요 자바스크립트") -> 실행시 배너창에 해당 문장 나옴
document.write(""); -> system.out.print 랑 같은 개념
var -> 변수 선언시 사용(변수를 넣으면 그 데이터타입으로 맞춰줌)
function함수명(){}-> 함수 선언시 사용
function함수명(매개변수){}-> 매개변수를 받는 함수 사용시 매개변수랑 함수안에 변수명이 같으면 오류

function함수명(매개변수, 매개변수){
	var z = x+y;
	if(z<10){
	return;   // if조건식이 맞으면 실행종료
	}
	return z;  //조건식이 아니면 z 반환
}

eval = 문자열을 수식으로 변환
Number = 문자열을 숫자로 변환(실수값을 그대로 리턴, 매개변수 문자열이 숫자가 아니면 NaN반환)
parseInt =문자열을 숫자로 변환(실수값을 내림처리후 리턴, 매개변수 문자열이 숫자가 아니면 NaN반환)
!isNaN = 문자열이 숫자형식이면 true 아니면 false 반환
alert = 주어진 문자열을 확인 대화창으로 표시
confirm = 문자열이 표시되는 확인 취소 대화창으로 표시
prompt = 문자열이 제목으로 값을 입력받기 위한 대화창이 표시

이벤트
onAbort = 이미지를 로딩하는 작업이 사용자 행동으로 취소됬을경우
onBlur = 문서나 윈도우 폼 요소에서 현재 입력 포커스가 사라질 때
onChange = 텍스트 필드나 텍스트 영역 파일 업로드 선택 항목이 변경되어 현재 입력 포커스가 사라질 때
onClick = 링크나 클라이언트 쪽 이미지 맵 영역 폼 요소가 클릭되었을 때
onDbClick = 링크나 클라이언트 쪽 이미지 맵 영역 폼 요소가 더블 클릭되었을 때
onDragDrop = 드래그 된 객체가 윈도우의 영역에서 드롭 되었을 때
onError =이미지나 문서를 로딩하는 동안 에러가 발생 했을 때
onFocus = 문서나 폼 요소에 입력 포커스가 놓였을 때
onKeyDown = 키를 누를 때
onKeyPress = 키를 눌렀다 놓을 때
onKeyUp = 키를 놓았을 때
onLoad = 이미지나 문서가 로딩될 떄
onMouseDown = 마우스 버튼을 누를 때
onMouseMove = 마우스를 이동했을 때
onMouseOver = 문서의 태그영역에 마우스 커서가 들어갈 때
onMouseOut = 문서의 태그영역에 마우스 커서가 벗어날 때
onMouseUp = 마우스 버튼을 놓았을 때
onMove = 사용자가 윈도우에서 이동할 떄
onReset = 폼의 리셋 버튼을 클릭하여 리셋시킬 때

document.getElementById("아이디값"); = javascript와 html id 속성값 연결

form 태그
onsubmit="return 처리할함수(document.폼네임)" -> 액션으로 넘어가기 전에 처리할 이벤트
자바스크립트에서 html값을 사용시 name으로 구분

function checkForm(f){  // f=document.폼네임

	var r1 = /\d/g; //0~9
	var r2 = /\W/g; // 영어 숫자 제외
	var r3 = /[a-zA-z]/; // 영문자
	var year = f.year.value;  
		if(year==""){
			alert("년도를 선택하시오");
			f.year.value="";
			f.year.focus();
			return false;
		}
		
	var month = f.month.value;
		if(month==""){
			alert("달을 선택하시오");
			f.month.value="";
			f.month.focus();
			return false;
		}
		
	var day = f.day.value;
		if(day==""){
			alert("일을 선택하시오");
			f.day.value="";
			f.day.focus();
			return false;
		}
		
	var domain = f.domain.value;
		if(domain==""){
			alert("도메인을 선택하시오");
			f.domain.value="";
			f.domain.focus();
			return false;
		}
		
	var chk_num = f.password.value.search(r1);
	var chk_eng = f.password.value.search(r3);
	
	if(chk_num<0||chk_eng<0){
		alert("비밀번호는 숫자와 영문자를 혼용하여야 합니다");
		return false;
	}

	if(f.passwordOk.value != f.password.value){
		alert("비밀번호가 일치하지 않습니다.");
		f.passwordOk.value="";
		f.passwordOk.focus();
		return false;
	}

	if(f.id.value.substr(0,1).match(r3)==null){
		alert("아이디 첫 글자는 영어만 올 수 있습니다.");
		f.id.value="";
		f.id.focus();
		return false;
	}
	if(f.password.value.substr(0,1).match(r3)==null){
		alert("아이디 첫 글자는 영어만 올 수 있습니다.");
		f.password.value="";
		f.password.focus();
		return false;
	}
	if(f.email.value.substr(0,1).match(r3)==null){
		alert("아이디 첫 글자는 영어만 올 수 있습니다.");
		return false;
	}
}

request.setCharacterEncoding("utf-8"); -> 인코딩 버전
변수 = request.getParameter("불러올 값") -> 서브밋으로 불러올 값을 변수에 넣음
String[] subject = request.getParameterValues("subject") -> 서브밋으로 불러온 값을 배열에 넣음

Enumeration enu = request.getParameterNames();  //입력받을 name과 들어온 값을 출력해줌
		while(enu.hasMoreElements()){
			String name= (String) enu.nextElement();
			String[] values = request.getParameterValues(name);
			for(String value : values){
				System.out.println("name = "+name+", value = "+value);
			}
		}
response.setContentType("text/html;charset=utf-8"); -> 앙답할 데이터 종류를 html로 설정
PrintWriter out = response.getWriter();  -> 출력스트림 printwrite객체를 받아옴
String data =<>
 data +=<>
out.print(data);

private Statment stmt
ResultSet rs = stmt.execteQuery(처리할 쿼리문) -> 처리할 쿼리문을 보냄
-> rs란 변수가 처리한 값을 가져옴 

Statment는 느리고 명령어를 지정해 줘야해서 PreparedStatement 를 사용
private PreparedStatement pstmt;  
pstmt = con.prepareStatement(query);
ResultSet rs = pstmt.executeQuery(); -> 처리할 쿼리문을 보냄
 rs란 변수가 처리한 값을 가져옴 

private DataSource dataFactory;
try{
	Context ctx = new InitialContext();
	Context envContext = (Context) ctx.lookup("java:/comp/env");
		dataFactory = (DataSource) envContext.lookup("jdbc/oracle");
		}catch(Exception e) {
			e.printStackTrace();
		}
	}


private Connection con;  -> 쿼리문을 보내기위한 sql
	private PreparedStatement pstmt; -> 퀴리를 처리한 값을 받는 sql
	private DataSource dataFactory; -> db연결을위한 sql
-----------------------------------------------------
servers -> context.xml 에 아래 문장을 넣는 것으로 항상 db를 불러올수있음
<Resource
    	name ="jdbc/oracle"
    	auth ="Container"
    	type ="javax.sql.DataSource"
    	driverClassName = "oracle.jdbc.OracleDriver"
    	url ="jdbc:oracle:thin:@localhost:1521:XE"
    	username ="hr"
    	password ="1234"
    	maxActive ="50"
    	maxWait ="-1"/>

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"
    isELIgnored="false"%> ->  isELIgnored 값이 flase면 페이지에서 EL(표현언어)를 사용함
    
   jstl(표준 태그 라이브러리/주로 Core에서 c 사용)를 사용하겠다는 선언
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> -> 일반 프로그램이 언어에서 제공하는 것과 유사한 변수 선언 실행 흐름 제어 기능
    <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %> -> 숫자,날짜 시간을 formattiong 하는 국제화,다국어 지원 기능
    
    <% request.setCharacterEncoding("utf-8");%> ->요청한 인코딩을 utf-8

    JAVA웹 프로그램에서의 현재 프로젝트 경로를 ContextPath
    <c:set var ="contextPath" value ="${pageContext.request.contextPath}"/> -> contextPath가 변경되어도 소스 수정없이 사용하기 위해 사용

<script src="http://code.jquery.com/jquery-latest.min.js"> -> 제이쿼리를 사용하기위해 선언