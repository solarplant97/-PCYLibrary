내컴퓨터 c -> springproject폴더 생성
안에 eclipse - jee / apache tomcat 압축해제 workspace 폴더생성
이클립스 실행
window - >preferences -> surver -> runtime environmen - >
add -> 아파티 톰켓 버전선택/톰켓 폴더위치 선택
다음
help -> eclipse marketplace -> sts검색-> spring tools 4 인스텔 -> confirm -> 동의후 피니쉬
window - >preferences -> general -> content types -> text ->java project file -> default encoding -> utf-8후 업데이트
				-> workspace ->utf-8
				-> appearance -> colors and fornts -> basic -> text font -> edit ->글자크기 설정
			->web -> cssfiles -> utf-8
				-> htmlfiles -> utf -8
				-> jspfilews -> utf-8
			-> run/debug -> console -> limit consolre output 체크해제
다음
file -> new -> other -> spring -> spring regacy project-> spring mvc -> 프로젝트 생성

프로젝트 설정 project facets -> java ->runtime -> apache tomcat 체크 어플라이
	     java build path -> add external jars - > ojdbc8.jar 불러오기 -> 어플라이
	    deployment assembly -> add - >java bulid path entries -> next - >ojdbc8.jar  어플라이

pom.xml
자바 버전 변경
스프링 프레임 워크 버전 5.0.7변경

	<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.2</version>
	</dependency>
	
	<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.2</version>
	</dependency>
	
	<!-- spring jdbc -->
	<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
	</dependency>
	
	<!-- dbcp 이걸 추가해야 rootsurvlet에 bean으로 데이터소스 사용가능--> 
	<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
	</dependency>

추가

web.xml 버전 3.1로 변경
xsi 주소 java 대문자로 변경
서블릿 매핑 url 패턴 *.do로 변경
<welcome-file-list>  ---> 시작페이지 설정
	<welcome-file>index.jsp</welcome-file>
</welcome-file-list>
---------------------------------------------------------------------------------------------
servlet-context -> tx추가 트렌젝션 사용하기 위해 네임스페이스에서 추가
컨택스트 경로를 com.spring.**로 변경
<!-- 어노테이션 설정 -->
<context:annotation-config></context:annotation-config>추가
-----------------------------------------------------------------------------------------------
root-context ->  context  네임스페이스에서 추가
<!-- DataSource설정 -->
	<bean id ="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
	destroy-method = "close"> ---> 사용하지 않을때 닫는다	
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="username" value="hr"></property>
		<property name="password" value="1234"></property>
	
	</bean>

<!-- mybatis setting -->
	<bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mappings/*.xml"></property>
	</bean>
	<bean id ="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" 
	destroy-method="clearCache"> --->사용하지 않을때 캐쉬를 지운다
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
<!-- 트랜젝션 적용 -->
	<bean id ="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

1. 테이블을 참고하여 vo생성

2. controller 생성
@Controller  = 컨트롤러 선언
@RequestMapping(value="/subject") = 응답할 주소 선언
public class SubjectController {
	private static final String CONTEXT_PATH = "subject";

	@Autowired  //컨트롤러에서 사용할 서비스를 읽어옴
	private SubjectService subjectService;
	
	@RequestMapping("/listSubject")
	public ModelAndView listSubject(@ModelAttribute SubjectVO param) {
		// ModelAndView -> 데이터와 보여줄려는 page를 같이 저장
		List<SubjectVO> list = subjectService.listSubject(param);
		
		ModelAndView mav = new ModelAndView();
		mav.addObject("subjectList", list);
		mav.setViewName(CONTEXT_PATH+"/subject");
		
		return mav;
	}
}

3. 컨트롤러에서 사용하는 서비스 생성
4. 서비스 기능을 구현
@Service
@Transactional
public class SubjectServiceImpl implements SubjectService {

	@Autowired
	private SubjectMapper subjectMapper;
	
	@Override
	public List<SubjectVO> listSubject(SubjectVO param) {

		List<SubjectVO> list = new ArrayList<SubjectVO>();
		
		list = subjectMapper.listSubject(param);
		
		return list;
	}

	@Override
	public int insertSubject(SubjectVO param) {
		
		return subjectMapper.insertSubject(param);
	}
	
	
}
5. 서비스 기능에서 사용하는 맵퍼를 생성
6. 맵퍼의 기능을 구현
@Repository /* 저장소 */
public class SubjectMapperImpl implements SubjectMapper {

	@Autowired
	private SqlSession sqlSession;
	
	private static final String namespace ="com.spring.subjectdao.SubjectMapper";
	
	@Override
	public List<SubjectVO> listSubject(SubjectVO param) {
		
		return sqlSession.selectList(namespace+".listSubject", param);
	}

	@Override
	public int insertSubject(SubjectVO param) {
		// TODO Auto-generated method stub
		return sqlSession.insert(namespace+".insertSubject",param);
	}
}

7. mybatis 맵퍼 구현
<mapper namespace="com.spring.subjectdao.SubjectMapper">

	<!-- 값을 가지고있음 -->
	<resultMap type="com.spring.subjectvo.SubjectVO" id="SubjectVO">
		<result property="no" column="no" />
		<result property="s_num" column="s_num" />
		<result property="s_name" column="s_name" />
	</resultMap>
	
	<!-- id로 구별해서 실행 / 불러오는 db행의 결과가 여러개면 resultMap, 하나만 골라서 가져오면 resultType  --> 
	<select id="listSubject" parameterType="com.spring.subjectvo.SubjectVO" resultMap="SubjectVO">
		SELECT
		no,
		s_num,
		s_name
		FROM subject
	</select>

	<insert id="insertSubject" parameterType="com.spring.subjectvo.SubjectVO">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select subject_seq.nextval from dual		
		</selectKey>
		
		INSERT INTO subject (no, s_num, s_name)
		<!-- 밸류는 입력받은 폼에 id를 가져옴 -->
		VALUES(#{no},#{s_num},#{s_name})
	</insert>......

8.컨트롤러에서 지정해준 모델and뷰 주소와 이름의 jsp파일 생성

loc = 결합도 관련기능
AOP = 응집도 관련기능
AOP 용어
joinpoint = 클라이언트가 호출하는 모든 비즈니스 메소드 (Impl클래스의 모든 메소드/Pointcut 대상,후보)
Pointcut = 필터링된 joinpoint, 수많은 비즈니스 메소드 중에서 특정 메소드에서만 횡단 관심에 해당하는
	공통 기능을 수행시키기 위해 사용
Advice = 횡단 관심에 해당하는 공통 기능의 코드, 독립된 클래스의 메소드를 작성
Weaving = 포인트 컷으로 지정된 핵심 관심 메소드가 호출될 때 어드바이스에 해당하는 횡단 관심 메소드가
	삽입되는 과정을 의미(스프링은 Runtime 위빙 방식만 지원)
Advisor 또는 Aspect = AOP의 핵심 액스팩트, 포인트컷과 어드바이스의 결합으로 어떤 포인트컷 메소드에
		대하여 어떤 어드바이스 메소드를 실행할 지 결정한다
execution(  *         com.spring..    *Impl.     *(..))
	리턴타입  패키지경로     클래스명  메소드명(매개변수)

리턴타입 지정
* = 모든 리턴타입
void = 리턴타입이 void인 메소드 선택
!void = 리턴타입이 void가 아닌 메소드 선택

패키지 지정
com.spring = 정확하게 com.spring 패키지만
com.spring.. = com.spring 패키지로 시작하는 모든 팩키지
com.spring..impl = com.spirng 패키지로 시작하고 impl로 끝나는 패키지

클래스 지정
BoardServiceimpl = 정확하게 BoardServiceimpl 클래스만 선택
*Impl = Impl로 끝나는 클래스만 선택
BoardService+ = 클래스 이름 뒤에 +가 붙으면 클래스로 파생된 자식 클래스 선택

매소드 지정
*(..) = 가장 기본 설정으로 모든 메소드 선택
get*(..) = 메소드 이름이 get으로 시작한는 모든 메소드 선택

매개변수 지정
(..) = 매개변수 개수와 타입 제약이 없음
(*) = 반드시 1개의 매개변수를 가지는 메소드만 
(com.spring.user.UserVO) = 매개변수로UserVO를 가지는 메소드만 클래스 패키지 경로가 반드시 있어야함
(!com.spring.user.UserVO) = 매개변수로UserVO를 가지지 않는 메소드만 클래스 패키지 경로가 반드시 있어야함
(Integer, ..) = 한 개 이상의 매개변수를 가지되 첫번째 매개변수 타입 integer
(Integer, *) = 두 개의 매개변수를 가지되 첫번째 매개변수 타입 integer

어드바이스 동작시점
before = 비지니스 메소드 실행 전
after Returning = 비지니스 메소드가 성공적으로 리턴되면
after Throwing = 비지니스 메소드가 예외가 발생되면
after = 비지니스 메소드 실행 후
around = 메소드 호출 자체를 가로로 비지니스 메소드 실행 전후에 처리할 로직을 삽입

aop 사용을 위해 bean에 xmlns:aop="http://www.springframework.org/schema/aop"추가